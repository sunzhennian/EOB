(require 'ox-publish)
(require 'eob-utils)


(defun eob-get-content(org-file)
  (interactive)
  (find-file org-file)
  (org-html-export-as-html nil nil nil t nil)
  (kill-buffer (file-name-nondirectory org-file))
  (setq org-html (substring-no-properties (car kill-ring)))
  (setq content (org-html-get-content-without-toc org-html))
)

(defun eob-generate-about(base-dir)
  (interactive)
      (setq post-file (expand-file-name "about.org" eob-project-directory))
      (setq content-all (ht-create))
      (ht-set content-all "context" (eob-get-content post-file))
      (ht-set content-all "post-title" "Resume")
      (ht-set content-all "site-title" eob-title)
      (ht-set content-all "site-author" eob-author-name)
      (ht-set content-all "head" (eob-generate-head  post-file nil))
      (ht-set content-all "navigation" (eob-generate-navigation))
      (setq fileHTMLSave  (expand-file-name "about/index.html" eob-publish-directory))
      (make-directory (file-name-directory fileHTMLSave) t)
	(with-temp-buffer
          (insert (eob-render "page.html" content-all))
          (when (file-writable-p fileHTMLSave)
          (write-region (point-min)
                      (point-max)
		      fileHTMLSave))	
     )
   (kill-buffer "*Org HTML Export*")
)


(defun eob-generate-post(base-dir site-sub-dir)
  (interactive)
  (let* ((post-list-all (eob-get-posts-with-properties base-dir site-sub-dir)))
    (setq i 0)
    (while (< i (length post-list-all))
      (setq content-all (nth i post-list-all))
      (ht-set content-all "context" (eob-get-content (ht-get (nth i post-list-all) "org-file-full-path")))
      (ht-set content-all "head" (eob-generate-head (ht-get (nth i post-list-all) "org-file-full-path") nil))
      (ht-set content-all "navigation" (eob-generate-navigation))
      (setq content-all (ht-merge content-all (eob-get-common-info)))
      (setq fileHTMLSave (expand-file-name (substring (ht-get (nth i post-list-all) "post-url") 1) eob-publish-directory))
      (make-directory (file-name-directory fileHTMLSave) t)
	(with-temp-buffer
          (insert (eob-render "post.html" content-all))
          (when (file-writable-p fileHTMLSave)
          (write-region (point-min)
                      (point-max)
		      fileHTMLSave))
	(setq i (1+ i))	
     ))
   )
   (kill-buffer "*Org HTML Export*")
)
  
(provide 'eob-generator-post)
