(require 'ox-publish)
(require 'eob-utils)


(defun eob-get-entry(org-file)
  (interactive)
  (with-temp-buffer
    (insert-file-contents org-file nil 0 500)
    (org-html-export-as-html)
    (setq org-html (substring-no-properties (car kill-ring)))
    (setq content (org-html-get-body-content org-html))
  )
)

(defun eob-generate-index(base-dir site-sub-dir)
  (interactive)
  (let* ((sub-dir (file-name-as-directory
                   (expand-file-name site-sub-dir base-dir)))
         (absolute-org-files (eob-get-base-files sub-dir)))
    (setq path-title-mtime-org-files
          (mapcar (lambda (filename)
                    (list (concat site-sub-dir
                                  "/"
                                  (s-chop-prefix sub-dir filename))
                          (org-org-get-file-title filename)
                          (org-org-get-file-mtime filename)))
                  absolute-org-files))

    (setq path-title-mtime-org-files
          (sort path-title-mtime-org-files
                #'(lambda (path-title-mtime1 path-title-mtime2)
                    (not (time-less-p (nth 2 path-title-mtime1)
                                      (nth 2 path-title-mtime2))))))

    (setq N_all  (length path-title-mtime-org-files))
    (setq n_list (float eob-page-per-index))
    (setq N_page (ceiling (/ N_all n_list)))
    (setq index_n 0)
    (while (< index_n N_page)
      (if (equal index_n 0) (setq index_file_name "index.html") (setq index_file_name (format "index/%s/index.html" index_n)) )
      (setq index_file_name (expand-file-name index_file_name eob-publish-directory))
      (make-directory (file-name-directory index_file_name) t)
      (setq enable-page-pre t)
      (setq enable-page-next t)
      (setq page-next (format "/index/%s/" (1+ index_n)))
      (setq page-pre (format "/index/%s/" (1- index_n)))
      (if (equal index_n 1)  (setq page-pre "/index.html"))
      (if (equal index_n 0) (setq enable-page-pre nil))
      (if (= index_n (1- N_page)) (setq enable-page-next nil))
      (setq post-list-ht (list ()))
      (setq i 0)
      (while (< i n_list)
        (setq post_num (ceiling (+ (* n_list index_n) i)))
        (cond ( (< post_num N_all)
      		(setq path (car (nth post_num path-title-mtime-org-files)))
        	(setq entry-part (eob-get-entry (expand-file-name path eob-project-directory)))
      		(setq filenameHTML (concat "/" (concat (file-name-sans-extension path) ".html" )))
      		(setq title (cadr (nth post_num path-title-mtime-org-files)))
      		(setq date (format-time-string "%Y-%m-%d" (caddr (nth post_num path-title-mtime-org-files))))
      		(add-to-list 'post-list-ht  (ht ("post-date" date) ("post-url" filenameHTML) ("post-title" title) ("post-entry" entry-part)))))
      	(setq i (1+ i))
      )
    (setq content-all (ht-create))
    (ht-set content-all "post-title" "Index")
    (ht-set content-all "site-title" eob-title)
    (ht-set content-all "site-author" eob-author-name)
    (ht-set  content-all "post-list" (reverse (butlast post-list-ht)))
    (ht-set  content-all "enable-page-pre" enable-page-pre)
    (ht-set  content-all "enable-page-next" enable-page-next)
    (ht-set  content-all "page-pre" page-pre)
    (ht-set  content-all "page-next" page-next)
    (ht-set content-all "head" (eob-generate-head nil "Home"))
    (ht-set content-all "navigation" (eob-generate-navigation))
    (with-temp-buffer
     (insert (eob-render "index.html" content-all))
     (when (file-writable-p index_file_name)
        (write-region (point-min)
                      (point-max)
		      index_file_name)))
    (setq index_n (1+ index_n))))
  ; (kill-buffer "*Org HTML Export*")
)
  

(provide 'eob-generator-index)
